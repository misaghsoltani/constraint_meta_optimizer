[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.metadata]
allow-direct-references = true

[project]
authors = [{ name = "Misagh Soltani", email = "misaghsoltani@gmail.com" }]
name = "constraint_meta_optimizer"
description = "Constraint‑Aware Meta‑Optimizer for Policy‑Gradient RL"
readme = "README.md"
requires-python = ">= 3.10, <3.11"
version = "0.1.0"
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "torch>=2.0",
    "safety-gymnasium @ git+https://github.com/PKU-MARL/Safety-Gymnasium.git",
    "gymnasium>=0.28.1,<0.29",
    "numpy>=1.23.5,<2",
    "tqdm>=4.67.1,<5",
    "pyyaml>=6.0.2,<7",
    "hydra-core>=1.3",
    "omegaconf>=2.3.0,<3",
    "matplotlib>=3.10.1,<4",
    "seaborn>=0.13.2,<0.14",
    "pandas>=2.2.3,<3",
    "tensorboard>=2.19.0,<3",
]

[project.urls]
GitHub = "https://github.com/misaghsoltani/constraint_meta_optimizer/"

[project.scripts]
cmo = "constraint_meta_optimizer.meta_trainer:main"

[tool.pixi.workspace]
preview = ["pixi-build"]
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64", "linux-aarch64"]

[tool.pixi.pypi-dependencies]
constraint_meta_optimizer = { path = ".", editable = true }

[tool.pixi.tasks]
lint = "ruff check --fix"
format = "ruff format"
test = "pytest --cov=constraint_meta_optimizer tests/"

[tool.pixi.environments]
default = { solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
all = { features = ["all", "test", "dev"], solve-group = "default" }


[tool.ruff]
target-version = "py310" # Lint against Python 3.10 rules
line-length = 120
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
extend-exclude = [
    "outputs",
    "runs",
]
fix = true # Auto-fix fixable lint errors

[tool.ruff.lint]
fixable = ["ALL"] # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$" # Allow unused variables when underscore-prefixed.
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # bugbear
    "D",   # pydocstyle
    "ANN", # flake8-annotations (type hints)
    "N",   # pep8-naming
    "C4",  # comprehensions
    "SIM", # flake8-simplify
    "TID", # tidy imports
    "PL",  # pylint
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "PLR0904", # too many public methods
    "PLR0913", # too many arguments
    "PLR0911", # too many return statements
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "N812", # lowercase package imoprted as non-lowercase
    "PLR2004", # Magic value used in comparison
    "PLR0914", # too many local variables
    "PLR1702", # too many nested blocks
    "N817", # CamelCase imported as UPPER_CASE
    "ANN401", # Dynamic type
]

[tool.ruff.lint.isort]
known-first-party = ["constraint_meta_optimizer"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false # Retain trailing commas when appropriate
line-ending = "auto"  # Use OS-native line endings
docstring-code-format = true
docstring-code-line-length = "dynamic" # This only has an effect when the `docstring-code-format` setting is enabled.

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true   # Warn about unused config entries
disallow_untyped_defs = true # Disallow functions without type hints

[tool.pytest.ini_options]
# minversion = "7.0"
addopts = "--maxfail=1 --disable-warnings -q --cov=constraint_meta_optimizer --cov-report=term-missing"
testpaths = ["constraint_meta_optimizer/tests"]

[dependency-groups]
test = ["pytest", "pytest-cov", "pytest-mock"]
dev = ["ruff"]
all = ["constraint_meta_optimizer[dev]", "constraint_meta_optimizer[test]"]
